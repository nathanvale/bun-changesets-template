name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write

env:
  BUN_VERSION: "1.1.38"
  NODE_VERSION: "20.x"
  FORCE_COLOR: 3

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache Dependencies
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            ~/.bun/cache
            node_modules
            .eslintcache
            .prettiercache
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: Lint
        run: bun run lint:check

      - name: Format Check
        run: bun run format:check

      - name: Type Check
        run: bun run typecheck

      - name: Build
        run: bun run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: dist/
          retention-days: 7

  test:
    name: Test (${{ matrix.os }}, Bun ${{ matrix.bun-version }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        bun-version: ["1.1.38", "1.1.37"]
        exclude:
          - os: windows-latest
            bun-version: "1.1.37"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ matrix.bun-version }}

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/cache
            node_modules
          key: ${{ runner.os }}-bun-test-${{ matrix.bun-version }}-${{ hashFiles('bun.lockb') }}

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      - name: Run Tests
        run: bun test --coverage --bail

      - name: Upload Coverage
        if: matrix.os == 'ubuntu-latest' && matrix.bun-version == '1.1.38'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-${{ github.sha }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      - name: Audit Dependencies
        run: |
          bun audit 2>&1 | tee audit.log
          if grep -q "high\|critical" audit.log; then
            echo "::error::High or critical vulnerabilities found"
            exit 1
          fi

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "HIGH,CRITICAL"

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  commitlint:
    name: Commit Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install Commitlint
        run: bun add -d @commitlint/cli @commitlint/config-conventional

      - name: Validate Commits
        run: |
          bunx commitlint \
            --from ${{ github.event.pull_request.base.sha }} \
            --to ${{ github.event.pull_request.head.sha }} \
            --verbose

  bundle:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      - name: Build and Analyze
        run: |
          bun run build:analyze > bundle-analysis.txt 2>&1
          bun run bundle:size

      - name: Comment Bundle Size
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const getSize = (file) => {
              try {
                return fs.statSync(file).size;
              } catch {
                return 0;
              }
            };
            const formatSize = (bytes) => {
              const kb = bytes / 1024;
              return `${kb.toFixed(2)} KB`;
            };
            const current = getSize('dist/index.js');
            const emoji = 'ðŸ“¦';
            const comment = `## ${emoji} Bundle Size Report

            **Size:** ${formatSize(current)}

            <details>
            <summary>View Bundle Analysis</summary>

            \`\`\`
            ${fs.readFileSync('bundle-analysis.txt', 'utf8').slice(0, 1000)}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [quality, test, security, commitlint]
    if: always()
    steps:
      - name: Check Status
        run: |
          if [[ "${{ needs.quality.result }}" == "failure" || \
                "${{ needs.test.result }}" == "failure" || \
                "${{ needs.security.result }}" == "failure" || \
                "${{ needs.commitlint.result }}" == "failure" ]]; then
            echo "::error::CI checks failed"
            exit 1
          fi
          echo "âœ… All CI checks passed!"

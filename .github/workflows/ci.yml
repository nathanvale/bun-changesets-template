name: ADHD CI
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20.18.1"
  PNPM_VERSION: "9.15.4"
  NODE_OPTIONS: "--max-old-space-size=4096"
  # Turbo remote cache for snappy CI across runs/branches
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_REMOTE_CACHE_SIGNATURE_KEY: ${{ secrets.TURBO_REMOTE_CACHE_SIGNATURE_KEY }}
  TURBO_SCM_BASE: ${{ github.event_name == 'pull_request' && format('origin/{0}', github.event.pull_request.base.ref) || 'origin/main' }}

permissions:
  contents: read
  actions: read
  checks: read

jobs:
  quick-tests:
    name: ‚ö° Quick Tests (5m)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      VITEST_SILENT: 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      - run: pnpm test:smoke

  focused-tests:
    name: üéØ Focused Tests (5m)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      VITEST_SILENT: 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      - name: Run Focused Tests
        run: |
          # Determine the best base reference (matching pre-push logic)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, use the base branch
            DEFAULT_BASE="origin/${{ github.event.pull_request.base.ref }}"
          elif [[ "${{ github.ref_name }}" == "develop" ]]; then
            DEFAULT_BASE="origin/develop"
          else
            DEFAULT_BASE="origin/main"
          fi

          # Compute merge-base for accurate change detection
          BASE_SHA=$(git merge-base HEAD "$DEFAULT_BASE" 2>/dev/null || echo "$DEFAULT_BASE")
          echo "Using base: $BASE_SHA (from $DEFAULT_BASE)"

          pnpm exec vitest run --changed "$BASE_SHA" --no-coverage --bail=1

  quality:
    name: üîß Quality (Format + Lint + Types) (8m)
    runs-on: ubuntu-latest
    needs: [quick-tests]
    if: ${{ !cancelled() && needs.quick-tests.result == 'success' }}
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      - name: Build packages for type resolution
        run: pnpm build
      - name: Run Quality Checks
        run: turbo run lint typecheck "//#format:check:root" --output-logs=errors-only

  build:
    name: üèóÔ∏è Build (5m)
    runs-on: ubuntu-latest
    needs: [quick-tests, quality]
    if: ${{ !cancelled() && needs.quick-tests.result == 'success' && needs.quality.result == 'success' }}
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      - run: pnpm build

  integration-tests:
    name: üî¨ Integration Tests (8m)
    runs-on: ubuntu-latest
    needs: [quick-tests, quality, build]  # Only run if quick tests, typecheck, and build pass
    timeout-minutes: 8
    if: ${{ !cancelled() && needs.quick-tests.result == 'success' && needs.quality.result == 'success' && needs.build.result == 'success' }}
    env:
      VITEST_SILENT: 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      - name: Run Integration Tests with Fast Fail
        run: TEST_MODE=integration pnpm exec vitest run --bail=1 --no-coverage

  commit-lint:
    name: ‚öß Commit Lint (5m)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      - run: |
          # Use commitlint's from/to range checking which respects ignores config
          # This will automatically skip merge commits based on commitlint.config.js
          pnpm commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  ci-status:
    name: üìä CI Status
    runs-on: ubuntu-latest
    needs: [quick-tests, focused-tests, integration-tests, quality, build, commit-lint]
    if: always()
    steps:
      - name: Generate Enhanced Status Report
        run: |
          # Generate status for both console logs and GitHub Step Summary
          STATUS_CONTENT=$(cat << 'EOF'
          # üéØ ADHD-Optimized CI Pipeline Status

          ## üìä Pipeline Results

          | Job | Status | Result |
          |-----|--------|---------|
          | ‚ö° Quick Tests | $([[ "${{ needs.quick-tests.result }}" == "success" ]] && echo "‚úÖ" || echo "‚ùå") | ${{ needs.quick-tests.result }} |
          | üéØ Focused Tests | $([[ "${{ needs.focused-tests.result }}" == "success" ]] && echo "‚úÖ" || echo "‚ùå") | ${{ needs.focused-tests.result }} |
          | üî¨ Integration Tests | $([[ "${{ needs.integration-tests.result }}" == "success" ]] && echo "‚úÖ" || [[ "${{ needs.integration-tests.result }}" == "skipped" ]] && echo "‚è≠Ô∏è" || echo "‚ùå") | ${{ needs.integration-tests.result }} |
          | üîß Quality | $([[ "${{ needs.quality.result }}" == "success" ]] && echo "‚úÖ" || echo "‚ùå") | ${{ needs.quality.result }} |
          | üè† Build | $([[ "${{ needs.build.result }}" == "success" ]] && echo "‚úÖ" || echo "‚ùå") | ${{ needs.build.result }} |
          | ‚öß Commit Lint | $([[ "${{ needs.commit-lint.result }}" == "success" ]] && echo "‚úÖ" || [[ "${{ needs.commit-lint.result }}" == "skipped" ]] && echo "‚è≠Ô∏è" || echo "‚ùå") | ${{ needs.commit-lint.result }} |

          ## üß≠ Pipeline Flow
          Setup ‚Üí Quick Tests ‚Üí Integration ‚Üí Quality ‚Üí Build ‚Üí Status

          ## üîß Available Fix Commands
          - **Lint**: \`pnpm lint:fix\`
          - **Format**: \`pnpm format\`
          - **Types**: \`pnpm typecheck\`
          - **Tests**: \`pnpm test\`
          - **Integration**: \`pnpm test:integration\`
          EOF
          )

          # Output to both console and GitHub Step Summary
          echo "$STATUS_CONTENT"
          echo "$STATUS_CONTENT" >> $GITHUB_STEP_SUMMARY

          # Failure check
          if [[ "${{ needs.quick-tests.result }}" == "failure" || "${{ needs.focused-tests.result }}" == "failure" || "${{ needs.integration-tests.result }}" == "failure" || "${{ needs.quality.result }}" == "failure" || "${{ needs.build.result }}" == "failure" || "${{ needs.commit-lint.result }}" == "failure" ]]; then
            echo "‚ùå CI Pipeline failed" | tee -a $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "‚úÖ All CI checks passed!" | tee -a $GITHUB_STEP_SUMMARY
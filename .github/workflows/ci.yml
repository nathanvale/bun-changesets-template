name: ADHD CI
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: "20.18.1"
  PNPM_VERSION: "9.15.4"

jobs:
  setup:
    name: üîß Setup & Cache
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
      
      - name: Cache Dependencies
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .eslintcache
            .prettiercache
            .turbo
          key: deps-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-turbo-${{ hashFiles('turbo.json*', 'tsconfig*.json') }}
          restore-keys: |
            deps-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-
            deps-${{ runner.os }}-

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile --prefer-offline

  quick-tests:
    name: ‚ö° Quick Tests (1m)
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 1
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm test:smoke

  focused-tests:
    name: üéØ Focused Tests (5m)
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm test

  format:
    name: üíÖ Format (5m)
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm format:check

  lint:
    name: üîç Lint (5m)
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm lint

  types:
    name: üîß Types (5m)
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm typecheck

  commit-lint:
    name: ‚öß Commit Lint (5m)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm commitlint --from ${{ github.event.pull_request.base.sha }} --to HEAD --verbose

  ci-status:
    name: üìä CI Status
    runs-on: ubuntu-latest
    needs: [quick-tests, focused-tests, format, lint, types, commit-lint]
    if: always()
    steps:
      - name: Check Status
        run: |
          echo "üéØ ADHD-Optimized CI Pipeline Status"
          echo "‚úÖ Quick Tests: ${{ needs.quick-tests.result }}"
          echo "‚úÖ Focused Tests: ${{ needs.focused-tests.result }}"
          echo "‚úÖ Format: ${{ needs.format.result }}"
          echo "‚úÖ Lint: ${{ needs.lint.result }}"
          echo "‚úÖ Types: ${{ needs.types.result }}"
          echo "‚úÖ Commit Lint: ${{ needs.commit-lint.result }}"
          
          if [[ "${{ needs.quick-tests.result }}" == "failure" || "${{ needs.focused-tests.result }}" == "failure" || "${{ needs.format.result }}" == "failure" || "${{ needs.lint.result }}" == "failure" || "${{ needs.types.result }}" == "failure" || "${{ needs.commit-lint.result }}" == "failure" ]]; then
            echo "‚ùå CI Pipeline failed"
            exit 1
          fi
          echo "‚úÖ All CI checks passed!"
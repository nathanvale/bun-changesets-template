name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write

env:
  NODE_VERSION: "20.18.1"
  PNPM_VERSION: "9.15.4"
  FORCE_COLOR: 3
  # Vercel Remote Cache (free since Dec 2024) - set in repository secrets
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  # Optional: Enable cache signature verification for enhanced security
  # TURBO_REMOTE_CACHE_SIGNATURE_KEY: ${{ secrets.TURBO_REMOTE_CACHE_SIGNATURE_KEY }}

jobs:
  # Shared setup job to optimize dependency installation
  setup:
    name: 🔧 Setup
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Cache Dependencies
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .eslintcache
            .prettiercache
            .turbo
          key: deps-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-turbo-${{ hashFiles('turbo.json*', 'tsconfig*.json') }}
          restore-keys: |
            deps-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-
            deps-${{ runner.os }}-

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile --prefer-offline
        env:
          NODE_ENV: development

  lint:
    name: 🔍 Lint (5m)
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .eslintcache
            .prettiercache
            .turbo
          key: deps-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-turbo-${{ hashFiles('turbo.json*', 'tsconfig*.json') }}
          restore-keys: |
            deps-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-
            deps-${{ runner.os }}-

      - name: Install Dependencies (if cache miss)
        if: needs.setup.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run Lint
        run: pnpm run lint

  format:
    name: 💅 Format (5m)
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .eslintcache
            .prettiercache
            .turbo
          key: deps-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-turbo-${{ hashFiles('turbo.json*', 'tsconfig*.json') }}

      - name: Install Dependencies (if cache miss)
        if: needs.setup.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Check Format
        run: |
          CHANGED=$(git diff --name-only --diff-filter=ACMR origin/${{ github.base_ref }}... 2>/dev/null | wc -l | tr -d ' ')
          if [ "$CHANGED" -gt 0 ] && [ "$CHANGED" -lt 100 ]; then
            pnpm run format:changed || pnpm run format:check
          else
            pnpm run format:check
          fi

  typecheck:
    name: 📝 Types (5m)
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .eslintcache
            .prettiercache
            .turbo
          key: deps-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-turbo-${{ hashFiles('turbo.json*', 'tsconfig*.json') }}

      - name: Install Dependencies (if cache miss)
        if: needs.setup.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Type Check
        run: pnpm run typecheck

  build:
    name: 🔨 Build (10m)
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .eslintcache
            .prettiercache
            .turbo
          key: deps-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-turbo-${{ hashFiles('turbo.json*', 'tsconfig*.json') }}

      - name: Install Dependencies (if cache miss)
        if: needs.setup.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Build with Performance Monitoring
        run: time pnpm run build:all --continue=dependencies-successful

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: dist/
          retention-days: 7

  test:
    name: Test (${{ matrix.os }}, Node.js ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: ["20.18.1"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-test-${{ matrix.node-version }}-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
        env:
          NODE_ENV: development

      - name: Run Tests
        run: pnpm run test:ci
        env:
          NODE_ENV: test

      - name: Upload Coverage
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.18.1'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-${{ github.sha }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
        env:
          NODE_ENV: development

      - name: Audit Dependencies
        run: |
          # JSON output for reliable parsing
          pnpm audit --json > audit.json 2>&1 || true

          # Parse JSON for accurate vulnerability detection
          node -e "
            const fs = require('fs');
            let audit;
            try {
              const content = fs.readFileSync('audit.json', 'utf8');
              // Try to extract JSON from potential mixed output
              const jsonStart = content.indexOf('{');
              if (jsonStart >= 0) {
                audit = JSON.parse(content.substring(jsonStart));
              } else {
                console.log('No JSON output from audit, assuming no vulnerabilities');
                process.exit(0);
              }
            } catch (e) {
              console.log('Could not parse audit output, assuming no vulnerabilities');
              process.exit(0);
            }
            
            const vulns = audit.vulnerabilities || {};
            const critical = Object.values(vulns).filter(v => v.severity === 'critical').length;
            const high = Object.values(vulns).filter(v => v.severity === 'high').length;
            const moderate = Object.values(vulns).filter(v => v.severity === 'moderate').length;
            const low = Object.values(vulns).filter(v => v.severity === 'low').length;
            
            console.log('Security Audit Results:');
            console.log(\`  Critical: \${critical}\`);
            console.log(\`  High: \${high}\`);
            console.log(\`  Moderate: \${moderate}\`);
            console.log(\`  Low: \${low}\`);
            
            // Generate GitHub annotations
            if (critical > 0) {
              console.log(\`::error::Found \${critical} critical vulnerabilities\`);
            }
            if (high > 0) {
              console.log(\`::warning::Found \${high} high severity vulnerabilities\`);
            }
            
            // Fail if critical or high vulnerabilities exist
            if (critical > 0 || high > 0) {
              process.exit(1);
            }
          "

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "HIGH,CRITICAL"

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  commitlint:
    name: Commit Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install Commitlint
        run: pnpm add -D @commitlint/cli @commitlint/config-conventional

      - name: Validate Commits
        run: |
          pnpm exec commitlint \
            --from ${{ github.event.pull_request.base.sha }} \
            --to ${{ github.event.pull_request.head.sha }} \
            --verbose

  bundle:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
        env:
          NODE_ENV: development

      - name: Build and Analyze
        run: |
          pnpm run build:analyze > bundle-analysis.txt 2>&1 || true
          pnpm run bundle:size

      - name: Comment Bundle Size
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const getSize = (file) => {
              try {
                return fs.statSync(file).size;
              } catch {
                return 0;
              }
            };
            const formatSize = (bytes) => {
              const kb = bytes / 1024;
              return `${kb.toFixed(2)} KB`;
            };
            const current = getSize('dist/index.js');
            const emoji = '📦';
            const comment = `## ${emoji} Bundle Size Report

            **Size:** ${formatSize(current)}

            <details>
            <summary>View Bundle Analysis</summary>

            \`\`\`
            ${fs.existsSync('bundle-analysis.txt') ? fs.readFileSync('bundle-analysis.txt', 'utf8').slice(0, 1000) : 'No bundle analysis available'}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  status:
    name: 📊 CI Status
    runs-on: ubuntu-latest
    needs: [setup, lint, format, typecheck, build, test, security, commitlint, bundle]
    if: always()
    steps:
      - name: Check Status
        run: |
          echo "## 🔍 CI Pipeline Status Summary"
          echo "| Job | Status |"
          echo "|-----|---------|"
          echo "| 🔧 Setup | ${{ needs.setup.result }} |"
          echo "| 🔍 Lint | ${{ needs.lint.result }} |"
          echo "| 💅 Format | ${{ needs.format.result }} |"
          echo "| 📝 Types | ${{ needs.typecheck.result }} |"
          echo "| 🔨 Build | ${{ needs.build.result }} |"
          echo "| 🧪 Test | ${{ needs.test.result }} |"
          echo "| 🛡️ Security | ${{ needs.security.result }} |"
          echo "| 📝 Commitlint | ${{ needs.commitlint.result }} |"
          echo "| 📦 Bundle | ${{ needs.bundle.result }} |"
          echo ""

          # Check for any failures
          if [[ "${{ needs.setup.result }}" == "failure" || \
                "${{ needs.lint.result }}" == "failure" || \
                "${{ needs.format.result }}" == "failure" || \
                "${{ needs.typecheck.result }}" == "failure" || \
                "${{ needs.build.result }}" == "failure" || \
                "${{ needs.test.result }}" == "failure" || \
                "${{ needs.security.result }}" == "failure" || \
                "${{ needs.commitlint.result }}" == "failure" || \
                "${{ needs.bundle.result }}" == "failure" ]]; then
            echo "::error::❌ CI pipeline failed - check individual jobs above"
            exit 1
          fi

          echo "✅ All CI checks passed! Pipeline completed successfully."

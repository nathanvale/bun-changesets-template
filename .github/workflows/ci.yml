name: ADHD CI
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20.18.1"
  PNPM_VERSION: "9.15.4"
  NODE_OPTIONS: "--max-old-space-size=4096"
  # Turbo remote cache for snappy CI across runs/branches
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_REMOTE_CACHE_SIGNATURE_KEY: ${{ secrets.TURBO_REMOTE_CACHE_SIGNATURE_KEY }}
  TURBO_SCM_BASE: ${{ github.event_name == 'pull_request' && format('origin/{0}', github.event.pull_request.base.ref) || 'origin/main' }}

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  quick-tests:
    name: ‚ö° Quick Tests (5m)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      VITEST_SILENT: 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      - name: Run Smoke Tests (with JUnit, low-noise)
        run: |
          mkdir -p test-results
          pnpm run test:smoke -- --reporter=dot --reporter=junit --outputFile=./test-results/junit-smoke.xml
      - name: Upload JUnit (Smoke)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-smoke-${{ github.run_number }}
          path: test-results/junit-smoke.xml
          retention-days: 14

  focused-tests:
    name: üéØ Focused Tests (5m)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      VITEST_SILENT: 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      - name: Run Focused Tests
        run: |
          # Determine the best base reference (matching pre-push logic)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, use the base branch
            DEFAULT_BASE="origin/${{ github.event.pull_request.base.ref }}"
          elif [[ "${{ github.ref_name }}" == "develop" ]]; then
            DEFAULT_BASE="origin/develop"
          else
            DEFAULT_BASE="origin/main"
          fi

          # Compute merge-base for accurate change detection
          BASE_SHA=$(git merge-base HEAD "$DEFAULT_BASE" 2>/dev/null || echo "$DEFAULT_BASE")
          echo "Using base: $BASE_SHA (from $DEFAULT_BASE)"

          # Note:
          # - Vitest `--changed` prefers a commit SHA/merge-base for accuracy (we use BASE_SHA)
          # - Turborepo remote cache uses the ref (e.g., origin/main) via TURBO_SCM_BASE for graphing/cache hits
          #   We intentionally keep both concepts separate to maximize correctness and cache performance.

          echo "Listing changed test files (if any) for visibility:"
          mkdir -p test-results
          CHANGED_FILES=$(pnpm exec vitest list --changed "$BASE_SHA" --filesOnly || true)
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "‚ÑπÔ∏è  No changed tests detected. Skipping focused test run."
            # Write an empty JUnit file to keep artifact contract predictable
            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuites/>" > ./test-results/junit-focused.xml
          else
            echo "$CHANGED_FILES" | tee ./test-results/changed-tests.txt
            pnpm exec vitest run --changed "$BASE_SHA" --no-coverage --bail=1 \
              --reporter=dot --reporter=junit --outputFile=./test-results/junit-focused.xml
          fi
      - name: Upload JUnit (Focused)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-focused-${{ github.run_number }}
          path: test-results/junit-focused.xml
          retention-days: 14

  quality:
    name: üîß Quality (Format + Lint + Types) (8m)
    runs-on: ubuntu-latest
    # Run in parallel with quick-tests for faster overall feedback
    if: ${{ !cancelled() }}
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      - name: Run Quality Checks
        run: turbo run lint typecheck "//#format:check:root" --continue=dependencies-successful --output-logs=errors-only

  build:
    name: üèóÔ∏è Build (5m)
    runs-on: ubuntu-latest
    needs: [quick-tests, quality]
    if: ${{ !cancelled() && needs.quick-tests.result == 'success' && needs.quality.result == 'success' }}
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      - run: pnpm build

  integration-tests:
    name: üî¨ Integration Tests (8m)
    runs-on: ubuntu-latest
    needs: [quick-tests, quality, build]  # Only run if quick tests, typecheck, and build pass
    timeout-minutes: 8
    if: ${{ !cancelled() && needs.quick-tests.result == 'success' && needs.quality.result == 'success' && needs.build.result == 'success' }}
    env:
      VITEST_SILENT: 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      - name: Run Integration Tests with Fast Fail (low-noise)
        run: |
          mkdir -p test-results
          TEST_MODE=integration pnpm exec vitest run --bail=1 --no-coverage \
            --reporter=dot --reporter=junit --outputFile=./test-results/junit-integration.xml
      - name: Upload JUnit (Integration)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-integration-${{ github.run_number }}
          path: test-results/junit-integration.xml
          retention-days: 14

  commit-lint:
    name: ‚öß Commit Lint (5m)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      - run: |
          # Use commitlint's from/to range checking which respects ignores config
          # This will automatically skip merge commits based on commitlint.config.js
          pnpm commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  ci-status:
    name: üìä CI Status
    runs-on: ubuntu-latest
    needs: [quick-tests, focused-tests, integration-tests, quality, build, commit-lint]
    if: always()
    steps:
      - name: Download all JUnit artifacts
        if: always()
        uses: actions/download-artifact@v4
        with:
          pattern: junit-*
          merge-multiple: true
          path: aggregated-junit

      - name: Publish JUnit Test Report (Dashboard)
        if: always()
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: 'aggregated-junit/**/*.xml'
          check_name: 'Test Report'
          detailed_summary: true
          include_passed: false
          require_tests: false
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate HTML Test Report
        if: always()
        run: |
          # Check if aggregated-junit exists and has files
          if [ -d aggregated-junit ] && [ "$(ls -A aggregated-junit 2>/dev/null)" ]; then
            npx --yes junit-viewer@9 --results=aggregated-junit --save=test-report/index.html --minify
            echo "HTML report generated at test-report/index.html"
          else
            echo "No JUnit files found, creating placeholder report"
            mkdir -p test-report
            echo '<!DOCTYPE html><html><head><title>No Test Results</title></head><body><h1>No test results available</h1></body></html>' > test-report/index.html
          fi
      - name: Upload HTML Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-html-${{ github.run_number }}
          path: test-report
          retention-days: 14

      - name: Upload Aggregated JUnit
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-all-${{ github.run_number }}
          path: aggregated-junit
          retention-days: 14

      - name: Generate Enhanced Status Report
        run: |
          # Generate status for both console logs and GitHub Step Summary
          STATUS_CONTENT=$(cat << EOF
          # üéØ ADHD-Optimized CI Pipeline Status

          ## üìä Pipeline Results

          | Job | Status | Result |
          |-----|--------|---------|
          | ‚ö° Quick Tests | $([[ "${{ needs.quick-tests.result }}" == "success" ]] && echo "‚úÖ" || echo "‚ùå") | ${{ needs.quick-tests.result }} |
          | üéØ Focused Tests | $([[ "${{ needs.focused-tests.result }}" == "success" ]] && echo "‚úÖ" || echo "‚ùå") | ${{ needs.focused-tests.result }} |
          | üî¨ Integration Tests | $([[ "${{ needs.integration-tests.result }}" == "success" ]] && echo "‚úÖ" || [[ "${{ needs.integration-tests.result }}" == "skipped" ]] && echo "‚è≠Ô∏è" || echo "‚ùå") | ${{ needs.integration-tests.result }} |
          | üîß Quality | $([[ "${{ needs.quality.result }}" == "success" ]] && echo "‚úÖ" || echo "‚ùå") | ${{ needs.quality.result }} |
          | üè† Build | $([[ "${{ needs.build.result }}" == "success" ]] && echo "‚úÖ" || echo "‚ùå") | ${{ needs.build.result }} |
          | ‚öß Commit Lint | $([[ "${{ needs.commit-lint.result }}" == "success" ]] && echo "‚úÖ" || [[ "${{ needs.commit-lint.result }}" == "skipped" ]] && echo "‚è≠Ô∏è" || echo "‚ùå") | ${{ needs.commit-lint.result }} |

          ## üß≠ Pipeline Flow
          Setup ‚Üí Quick Tests + Quality (parallel) ‚Üí Build ‚Üí Integration ‚Üí Status

          ## üîß Available Fix Commands
          - **Lint**: \`pnpm lint:fix\`
          - **Format**: \`pnpm format\`
          - **Types**: \`pnpm typecheck\`
          - **Tests**: \`pnpm test\`
          - **Integration**: \`pnpm test:integration\`
          
          ## üì¶ Artifacts
          - Aggregated JUnit: junit-all-${GITHUB_RUN_NUMBER}
          - Dashboard: Checks ‚Üí "Test Report" (click for failing tests, stack traces)
          - HTML Report: test-report-html-${GITHUB_RUN_NUMBER}
          EOF
          )

          # Output to both console and GitHub Step Summary
          echo "$STATUS_CONTENT"
          echo "$STATUS_CONTENT" >> $GITHUB_STEP_SUMMARY

          # Failure check
          if [[ "${{ needs.quick-tests.result }}" == "failure" || "${{ needs.focused-tests.result }}" == "failure" || "${{ needs.integration-tests.result }}" == "failure" || "${{ needs.quality.result }}" == "failure" || "${{ needs.build.result }}" == "failure" || "${{ needs.commit-lint.result }}" == "failure" ]]; then
            echo "‚ùå CI Pipeline failed" | tee -a $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "‚úÖ All CI checks passed!" | tee -a $GITHUB_STEP_SUMMARY

  publish-test-report:
    name: üöÄ Publish Test Report (Pages)
    if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
    needs: [ci-status]
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5
      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      - name: Download Aggregated JUnit
        uses: actions/download-artifact@v4
        with:
          name: junit-all-${{ github.run_number }}
          path: aggregated-junit
      - name: Generate HTML Test Report
        run: |
          # Prepare report directory
          mkdir -p test-report/junit
          # Copy raw XML for agents
          find aggregated-junit -type f -name '*.xml' -exec cp {} test-report/junit/ \;
          # Create a simple index for XML files
          (
            echo '<!doctype html><meta charset="utf-8"><title>JUnit XML</title><h1>JUnit XML Files</h1><ul>'
            for f in $(ls test-report/junit/*.xml 2>/dev/null | xargs -n1 basename); do
              echo "<li><a href=\"$f\">$f</a></li>"
            done
            echo '</ul>'
          ) > test-report/junit/index.html
          # Create machine-readable JSON index of XML files
          (
            echo '{'
            echo '  "version": 1,'
            echo '  "generatedAt": "'"$(date -u +%FT%TZ)"'",'
            echo '  "run": {'
            echo '    "runId": '"${GITHUB_RUN_ID}"','
            echo '    "runNumber": '"${GITHUB_RUN_NUMBER}"','
            echo '    "repo": '"\"${GITHUB_REPOSITORY}\""','
            echo '    "ref": '"\"${GITHUB_REF}\""','
            echo '    "sha": '"\"${GITHUB_SHA}\""''
            echo '  },'
            echo '  "urls": {'
            echo '    "html": "index.html",'
            echo '    "xmlZip": "junit.zip",'
            echo '    "xmlIndex": "junit/index.html"'
            echo '  },'
            echo '  "files": ['
            first=1
            for f in test-report/junit/*.xml; do
              [ -f "$f" ] || continue
              name=$(basename "$f")
              size=$(stat -c%s "$f" 2>/dev/null || stat -f%z "$f" 2>/dev/null || echo 0)
              sha=$(sha256sum "$f" 2>/dev/null | cut -d' ' -f1)
              if [ -z "$sha" ]; then sha=$(shasum -a 256 "$f" | awk '{print $1}'); fi
              if [ $first -eq 0 ]; then echo ','; else first=0; fi
              echo '    {"path": '"\"junit/$name\""', "size": '"$size"', "sha256": '"\"$sha\""'}'
            done
            echo '  ]'
            echo '}'
          ) > test-report/index.json
          # Create HTML dashboard
          npx --yes junit-viewer@9 --results=aggregated-junit --save=test-report/index.html --minify
          # Zip raw XML for easy download
          (cd test-report && zip -q -r junit.zip junit/*.xml || true)
      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: test-report
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Add URL to Job Summary
        run: |
          echo "# üåê Live Test Report" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "## ü§ñ Raw XML (for agents)" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.deployment.outputs.page_url }}junit.zip" >> $GITHUB_STEP_SUMMARY
          echo "## üìÑ JSON Index" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.deployment.outputs.page_url }}index.json" >> $GITHUB_STEP_SUMMARY

  publish-test-report-pr:
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    name: üîé Publish Test Report (PR Preview)
    if: ${{ github.event_name == 'pull_request' }}
    needs: [ci-status]
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
      pull-requests: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5
      - name: Download Aggregated JUnit
        uses: actions/download-artifact@v4
        with:
          name: junit-all-${{ github.run_number }}
          path: aggregated-junit
      - name: Generate HTML Test Report
        run: |
          # Prepare report directory
          mkdir -p test-report/junit
          # Copy raw XML for agents
          find aggregated-junit -type f -name '*.xml' -exec cp {} test-report/junit/ \;
          # Create a simple index for XML files
          (
            echo '<!doctype html><meta charset="utf-8"><title>JUnit XML</title><h1>JUnit XML Files</h1><ul>'
            for f in $(ls test-report/junit/*.xml 2>/dev/null | xargs -n1 basename); do
              echo "<li><a href=\"$f\">$f</a></li>"
            done
            echo '</ul>'
          ) > test-report/junit/index.html
          # Create machine-readable JSON index of XML files
          (
            echo '{'
            echo '  "version": 1,'
            echo '  "generatedAt": "'"$(date -u +%FT%TZ)"'",'
            echo '  "run": {'
            echo '    "runId": '"${GITHUB_RUN_ID}"','
            echo '    "runNumber": '"${GITHUB_RUN_NUMBER}"','
            echo '    "repo": '"\"${GITHUB_REPOSITORY}\""','
            echo '    "ref": '"\"${GITHUB_REF}\""','
            echo '    "sha": '"\"${GITHUB_SHA}\""''
            echo '  },'
            echo '  "urls": {'
            echo '    "html": "index.html",'
            echo '    "xmlZip": "junit.zip",'
            echo '    "xmlIndex": "junit/index.html"'
            echo '  },'
            echo '  "files": ['
            first=1
            for f in test-report/junit/*.xml; do
              [ -f "$f" ] || continue
              name=$(basename "$f")
              size=$(stat -c%s "$f" 2>/dev/null || stat -f%z "$f" 2>/dev/null || echo 0)
              sha=$(sha256sum "$f" 2>/dev/null | cut -d' ' -f1)
              if [ -z "$sha" ]; then sha=$(shasum -a 256 "$f" | awk '{print $1}'); fi
              if [ $first -eq 0 ]; then echo ','; else first=0; fi
              echo '    {"path": '"\"junit/$name\""', "size": '"$size"', "sha256": '"\"$sha\""'}'
            done
            echo '  ]'
            echo '}'
          ) > test-report/index.json
          # Create HTML dashboard
          npx --yes junit-viewer@9 --results=aggregated-junit --save=test-report/index.html --minify
          # Zip raw XML for easy download
          (cd test-report && zip -q -r junit.zip junit/*.xml || true)
      - name: Upload Pages Artifact (PR)
        uses: actions/upload-pages-artifact@v3
        with:
          path: test-report
      - name: Deploy PR Preview to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Add URL to Job Summary
        run: |
          echo "# üåê PR Test Report" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "## ü§ñ Raw XML (for agents)" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.deployment.outputs.page_url }}junit.zip" >> $GITHUB_STEP_SUMMARY
          echo "## üìÑ JSON Index" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.deployment.outputs.page_url }}index.json" >> $GITHUB_STEP_SUMMARY
      - name: Comment PR with Report Link
        uses: actions/github-script@v7
        with:
          script: |
            const url = `${{ toJson(steps.deployment.outputs.page_url) }}`.replaceAll('"','');
            const body = `üß™ Live Test Report: ${url}\n\nü§ñ Raw XML (for agents): ${url}junit.zip\n\nüìÑ JSON Index: ${url}index.json`;
            // Create or update a sticky comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const marker = '<!-- test-report-link -->';
            const existing = comments.find(c => c.user.login === 'github-actions[bot]' && c.body && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body: `${marker}\n${body}`,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `${marker}\n${body}`,
              });
            }

  ci-final-status:
    name: üßæ Final CI Summary (with PR links)
    if: ${{ github.event_name == 'pull_request' }}
    needs: [ci-status, publish-test-report-pr]
    runs-on: ubuntu-latest
    steps:
      - name: Append PR Report Links
        run: |
          echo "# üîó PR Report Links" >> $GITHUB_STEP_SUMMARY
          echo "Live Dashboard: ${{ needs.publish-test-report-pr.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "Raw XML (zip): ${{ needs.publish-test-report-pr.outputs.page_url }}junit.zip" >> $GITHUB_STEP_SUMMARY
          echo "JSON Index: ${{ needs.publish-test-report-pr.outputs.page_url }}index.json" >> $GITHUB_STEP_SUMMARY
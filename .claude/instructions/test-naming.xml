<!-- Test Naming Conventions - CRITICAL Rules -->
<test-naming-conventions priority="CRITICAL">
  <enforcement-level>MANDATORY - NO EXCEPTIONS</enforcement-level>
  <violation-policy>Tests violating these patterns will be rejected</violation-policy>
  
  <file-naming-rules>
    <rule type="unit" priority="CRITICAL">
      <pattern>[ComponentName].unit.test.ts</pattern>
      <location>Colocated with source files</location>
      <examples>
        <valid>UserService.unit.test.ts</valid>
        <valid>parseConfig.unit.test.ts</valid>
        <invalid reason="Missing type suffix">UserService.test.ts</invalid>
        <invalid reason="Wrong type suffix">UserService.spec.ts</invalid>
      </examples>
    </rule>
    
    <rule type="integration" priority="CRITICAL">
      <pattern>[FeatureName].integration.test.ts</pattern>
      <location>Root tests/ directory</location>
      <examples>
        <valid>auth-flow.integration.test.ts</valid>
        <valid>api-endpoints.integration.test.ts</valid>
        <invalid reason="Wrong location">src/auth.integration.test.ts</invalid>
      </examples>
    </rule>
    
    <rule type="e2e" priority="HIGH">
      <pattern>[UserFlow].e2e.test.ts</pattern>
      <location>Root tests/ directory</location>
      <examples>
        <valid>checkout-process.e2e.test.ts</valid>
        <valid>user-onboarding.e2e.test.ts</valid>
      </examples>
    </rule>
    
    <rule type="slow" priority="MEDIUM">
      <pattern>[FeatureName].slow.test.ts</pattern>
      <location>Root tests/ directory</location>
      <note>For tests that exceed 500ms but are necessary</note>
    </rule>
  </file-naming-rules>
  
  <method-naming-rules>
    <pattern>should_[expectedBehavior]_when_[condition]</pattern>
    <enforcement>STRICT</enforcement>
    
    <examples>
      <example>
        <name>should_return_user_data_when_valid_id_provided</name>
        <breakdown>
          <prefix>should</prefix>
          <expected-behavior>return_user_data</expected-behavior>
          <condition>valid_id_provided</condition>
        </breakdown>
      </example>
      
      <example>
        <name>should_throw_error_when_user_not_found</name>
        <breakdown>
          <prefix>should</prefix>
          <expected-behavior>throw_error</expected-behavior>
          <condition>user_not_found</condition>
        </breakdown>
      </example>
    </examples>
    
    <anti-patterns>
      <forbidden reason="No behavior description">test user data</forbidden>
      <forbidden reason="Too vague">it works</forbidden>
      <forbidden reason="Uses camelCase">shouldReturnUser</forbidden>
      <forbidden reason="Missing when clause">should_return_user</forbidden>
    </anti-patterns>
  </method-naming-rules>
</test-naming-conventions>
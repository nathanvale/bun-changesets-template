<!-- Test Structure Templates with AAA Pattern -->
<test-structure-templates>
  <template name="unit-test" priority="HIGH">
    <structure pattern="AAA">
      <arrange>
        <max-lines>2</max-lines>
        <purpose>Set up test data</purpose>
        <example><![CDATA[
const userId = '123';
const mockUser = { id: userId, name: 'Test User' };]]></example>
      </arrange>
      
      <act>
        <max-lines>1</max-lines>
        <purpose>Execute behavior</purpose>
        <example><![CDATA[
const result = await userService.getUser(userId);]]></example>
      </act>
      
      <assert>
        <max-lines>2</max-lines>
        <purpose>Verify outcome</purpose>
        <example><![CDATA[
expect(result).toEqual(mockUser);
expect(mockApi.get).toHaveBeenCalledOnce();]]></example>
      </assert>
    </structure>
    
    <complete-example><![CDATA[
import { describe, test, expect, beforeEach, vi } from 'vitest';
import { UserService } from './UserService';

describe('UserService', () => {
  let userService: UserService;
  let mockApi: any;
  
  beforeEach(() => {
    vi.clearAllMocks();
    mockApi = { get: vi.fn() };
    userService = new UserService(mockApi);
  });

  test('should_return_user_when_valid_id_provided', async () => {
    // Arrange
    const userId = '123';
    const expectedUser = { id: userId, name: 'John Doe' };
    mockApi.get.mockResolvedValue(expectedUser);
    
    // Act
    const result = await userService.getUser(userId);
    
    // Assert
    expect(result).toEqual(expectedUser);
    expect(mockApi.get).toHaveBeenCalledWith(`/users/${userId}`);
  });
  
  test('should_throw_error_when_user_not_found', async () => {
    // Arrange
    mockApi.get.mockRejectedValue(new Error('User not found'));
    
    // Act & Assert
    await expect(userService.getUser('999')).rejects.toThrow('User not found');
  });
});]]></complete-example>
  </template>
</test-structure-templates>
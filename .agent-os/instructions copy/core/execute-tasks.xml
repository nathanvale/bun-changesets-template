<?xml version="1.0" encoding="UTF-8"?>
<execute_tasks_protocol>

<!-- ============================================
     METADATA
     ============================================ -->
<metadata>
  <description>Rules to initiate execution of a set of tasks using Agent OS</description>
  <version>1.0</version>
  <encoding>UTF-8</encoding>
</metadata>

<!-- ============================================
     OVERVIEW
     ============================================ -->
<overview>
  Execute tasks for a given spec following three distinct phases:
  1. Pre-execution setup (Steps 1-3)
  2. Task execution loop (Step 4)
  3. Post-execution tasks (Step 5)
  
  <critical>ALL three phases MUST be completed. Do not stop after phase 2.</critical>
</overview>

<!-- ============================================
     PRE-FLIGHT CHECK
     ============================================ -->
<pre_flight_check>
  <execute>@.agent-os/instructions/meta/pre-flight.md</execute>
</pre_flight_check>

<!-- ============================================
     PROCESS FLOW
     ============================================ -->
<process_flow>

  <!-- ========================================
       PHASE 1: PRE-EXECUTION SETUP
       ======================================== -->
  <phase id="1" name="Pre-Execution Setup">
    
    <step number="1" name="task_assignment">
      <title>Task Assignment</title>
      <description>
        Identify which tasks to execute from the spec (using spec_srd_reference 
        file path and optional specific_tasks array), defaulting to the next 
        uncompleted parent task if not specified.
      </description>
      
      <task_selection>
        <explicit>
          <condition>User specifies exact task(s)</condition>
          <action>Use specified task numbers</action>
        </explicit>
        <implicit>
          <condition>No tasks specified</condition>
          <action>Find next uncompleted task in tasks.md</action>
        </implicit>
      </task_selection>
      
      <instructions>
        <action>Identify task(s) to execute</action>
        <default>Select next uncompleted parent task if not specified</default>
        <confirm>Task selection with user</confirm>
      </instructions>
      
      <output>
        <![CDATA[
        Tasks identified for execution:
        {{#each tasks}}
        - Task {{this.number}}: {{this.description}}
        {{/each}}
        
        Proceed with these tasks? (yes/no):
        ]]>
      </output>
    </step>
    
    <step number="2" subagent="context-fetcher" name="context_analysis">
      <title>Context Analysis</title>
      <description>
        Use the context-fetcher subagent to gather minimal context for task 
        understanding by always loading spec tasks.md, and conditionally loading 
        mission-lite.md, spec-lite.md, and technical-spec.md if not already in context.
      </description>
      
      <subagent_invocation>
        <primary>
          <![CDATA[
          @context-fetcher, please load:
          - The spec tasks.md from {{SPEC_PATH}}/tasks.md
          - Product pitch from @.agent-os/product/mission-lite.md (if exists)
          - Spec summary from {{SPEC_PATH}}/spec-lite.md (if exists)
          - Technical approach from {{SPEC_PATH}}/sub-specs/technical-spec.md (if exists)
          
          Return the content and key points from each file found.
          ]]>
        </primary>
        <fallback>
          <![CDATA[
          @subagent, please load the spec context files listed above.
          ]]>
        </fallback>
        <direct_tools>
          <action>Read("{{SPEC_PATH}}/tasks.md")</action>
          <action>Read("@.agent-os/product/mission-lite.md")</action>
          <action>Read("{{SPEC_PATH}}/spec-lite.md")</action>
          <action>Read("{{SPEC_PATH}}/sub-specs/technical-spec.md")</action>
        </direct_tools>
      </subagent_invocation>
      
      <context_gathering>
        <essential_docs>
          <doc>tasks.md for task breakdown</doc>
        </essential_docs>
        <conditional_docs>
          <doc>mission-lite.md for product alignment</doc>
          <doc>spec-lite.md for feature summary</doc>
          <doc>technical-spec.md for implementation details</doc>
        </conditional_docs>
      </context_gathering>
      
      <instructions>
        <action>Use context-fetcher subagent to load context</action>
        <process>Analyze returned information</process>
        <wait>For subagent response</wait>
      </instructions>
      
      <output>
        <![CDATA[
        Loading context files...
        @context-fetcher, please load the spec context files...
        [Waiting for context-fetcher response...]
        
        ✓ Context loaded successfully
        ✓ Key requirements understood
        ]]>
      </output>
    </step>
    
    <step number="3" subagent="git-workflow" name="git_branch_management">
      <title>Git Branch Management</title>
      <description>
        Use the git-workflow subagent to manage git branches to ensure proper 
        isolation by creating or switching to the appropriate branch for the spec.
      </description>
      
      <branch_naming>
        <source>spec folder name</source>
        <format>exclude date prefix</format>
        <example>
          <folder>2025-03-15-password-reset</folder>
          <branch>password-reset</branch>
        </example>
      </branch_naming>
      
      <subagent_invocation>
        <primary>
          <![CDATA[
          @git-workflow, check and manage branch for spec: {{SPEC_FOLDER}}
          - Derive branch name: {{BRANCH_NAME}}
          - Create branch if needed
          - Switch to correct branch
          - Handle any uncommitted changes
          ]]>
        </primary>
        <fallback>
          <![CDATA[
          @subagent, manage git branch for {{BRANCH_NAME}}
          ]]>
        </fallback>
        <direct_tools>
          <action>git stash</action>
          <action>git checkout {{BRANCH_NAME}} || git checkout -b {{BRANCH_NAME}}</action>
        </direct_tools>
      </subagent_invocation>
      
      <instructions>
        <action>Use git-workflow subagent</action>
        <request>Check and manage branch for spec</request>
        <wait>For branch setup completion</wait>
      </instructions>
      
      <output>
        <![CDATA[
        Setting up git branch...
        @git-workflow, manage branch for spec...
        [Waiting for git-workflow response...]
        
        ✓ Branch: {{BRANCH_NAME}} (active)
        ✓ Working tree: clean
        ]]>
      </output>
    </step>
    
    <phase_gate>
      <![CDATA[
      === PHASE 1 COMPLETE ===
      ✓ Tasks identified: {{task_count}}
      ✓ Context loaded: Yes
      ✓ Branch ready: {{BRANCH_NAME}}
      
      Proceeding to Phase 2: Task Execution
      ]]>
    </phase_gate>
    
  </phase>

  <!-- ========================================
       PHASE 2: TASK EXECUTION LOOP
       ======================================== -->
  <phase id="2" name="Task Execution Loop">
    
    <step number="4" name="task_execution_loop">
      <title>Task Execution Loop</title>
      <description>
        Execute all assigned parent tasks and their subtasks using 
        @.agent-os/instructions/core/execute-task.md instructions, 
        continuing until all tasks are complete.
      </description>
      
      <important>
        This is a loop. Execute ALL assigned tasks before proceeding to Phase 3.
      </important>
      
      <execution_flow>
        <![CDATA[
        LOAD @.agent-os/instructions/core/execute-task.md ONCE
        
        FOR each parent_task assigned in Step 1:
          EXECUTE instructions from execute-task.md with:
            - parent_task_number
            - all associated subtasks
          WAIT for task completion
          UPDATE tasks.md status
        END FOR
        
        **IMPORTANT**: After loop completes, CONTINUE to Phase 3 (Step 5). 
                       Do not stop here.
        ]]>
      </execution_flow>
      
      <loop_logic>
        <continue_conditions>
          <condition>More unfinished parent tasks exist</condition>
          <condition>User has not requested stop</condition>
        </continue_conditions>
        <exit_conditions>
          <condition>All assigned tasks marked complete</condition>
          <condition>User requests early termination</condition>
          <condition>Blocking issue prevents continuation</condition>
        </exit_conditions>
      </loop_logic>
      
      <task_status_check>
        <![CDATA[
        AFTER each task execution:
          CHECK tasks.md for remaining tasks
          IF all assigned tasks complete:
            PROCEED to next step
          ELSE:
            CONTINUE with next task
        ]]>
      </task_status_check>
      
      <instructions>
        <action>Load execute-task.md instructions once at start</action>
        <reuse>Same instructions for each parent task iteration</reuse>
        <loop>Through all assigned parent tasks</loop>
        <update>Task status after each completion</update>
        <verify>All tasks complete before proceeding</verify>
        <handle>Blocking issues appropriately</handle>
        <important>When all tasks complete, proceed to Step 5</important>
      </instructions>
      
      <loop_output>
        <![CDATA[
        Loading execute-task.md...
        
        {{#each tasks}}
        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━
        Task {{@index + 1}}/{{../task_count}}: {{this.number}}
        Executing with execute-task.md...
        [Task execution in progress...]
        ✓ Task {{this.number}} complete
        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━
        {{/each}}
        
        All tasks executed successfully.
        ]]>
      </loop_output>
    </step>
    
    <phase_gate>
      <![CDATA[
      === PHASE 2 COMPLETE ===
      ✓ Tasks executed: {{task_count}}
      ✓ All tasks marked complete: Yes
      
      Proceeding to Phase 3: Post-Execution Tasks
      ]]>
    </phase_gate>
    
  </phase>

  <!-- ========================================
       PHASE 3: POST-EXECUTION TASKS
       ======================================== -->
  <phase id="3" name="Post-Execution Tasks">
    
    <step number="5" name="post_execution_tasks">
      <title>Run the task completion steps</title>
      <description>
        After all tasks in tasks.md have been implemented, use 
        @.agent-os/instructions/core/post-execution-tasks.md to run our 
        series of steps we always run when finishing and delivering a new feature.
      </description>
      
      <critical>
        This step MUST be executed after all tasks are implemented. 
        Do not end the process without completing this phase.
      </critical>
      
      <instructions>
        <load>@.agent-os/instructions/core/post-execution-tasks.md once</load>
        <action>Execute all steps in the post-execution-tasks.md process_flow</action>
        <important>
          This includes:
          - Running full test suite
          - Git workflow (commit, push, PR)
          - Verifying task completion
          - Updating roadmap (if applicable)
          - Creating recap document
          - Generating completion summary
          - Playing notification sound
        </important>
      </instructions>
      
      <execution>
        <![CDATA[
        Loading post-execution-tasks.md...
        
        Executing post-execution steps:
        1. Running test suite... ✓
        2. Git workflow (commit, push, PR)... ✓
        3. Verifying task completion... ✓
        4. Updating roadmap... {{roadmap_status}}
        5. Creating recap document... ✓
        6. Generating summary... ✓
        7. Playing notification... 🔔
        
        All post-execution tasks complete.
        ]]>
      </execution>
    </step>
    
    <phase_gate>
      <![CDATA[
      === PHASE 3 COMPLETE ===
      ✓ Tests run: PASSED
      ✓ Code committed and pushed: Yes
      ✓ Pull request created: {{pr_url}}
      ✓ Documentation generated: Yes
      ✓ Notification sent: Yes
      ]]>
    </phase_gate>
    
  </phase>

</process_flow>

<!-- ============================================
     FINAL SUMMARY
     ============================================ -->
<final_summary>
  <![CDATA[
  ╔════════════════════════════════════╗
  ║   TASK EXECUTION COMPLETE         ║
  ╠════════════════════════════════════╣
  ║ Phase 1: Setup         ✓ Complete  ║
  ║ Phase 2: Execution     ✓ Complete  ║
  ║ Phase 3: Finalization  ✓ Complete  ║
  ║                                    ║
  ║ Tasks completed: {{task_count}}    ║
  ║ PR created: {{pr_url}}             ║
  ║ All phases finished successfully   ║
  ╚════════════════════════════════════╝
  ]]>
</final_summary>

<!-- ============================================
     POST-FLIGHT CHECK
     ============================================ -->
<post_flight_check>
  <execute>@.agent-os/instructions/meta/post-flight.md</execute>
</post_flight_check>

</execute_tasks_protocol>

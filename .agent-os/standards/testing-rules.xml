<!-- Lean Testing Rules & Best Practices (Tool-Agnostic)
Author: Nathan • Focus: naming, structure, fast feedback, ADHD-friendly flows
-->

<TestPlan id="lean-testing-plan" version="1.0">

  <Scope>
    <Statement>Applies to all automated tests (unit, integration, e2e, slow).</Statement>
    <NonGoals>Does not prescribe a specific runner or IDE plugin.</NonGoals>
  </Scope>

  <!-- =========================
       1) NAMING CONVENTIONS
       ========================= -->
  <NamingConventions priority="CRITICAL">
    <FileRules>
      <Rule type="unit" location="colocated">
        <pattern>[ComponentName].unit.test.ts</pattern>
        <examples>
          <valid>UserService.unit.test.ts</valid>
          <valid>parseConfig.unit.test.ts</valid>
          <invalid reason="Missing type suffix">UserService.test.ts</invalid>
          <invalid reason="Wrong type suffix">UserService.spec.ts</invalid>
        </examples>
      </Rule>
      <Rule type="integration" location="tests/">
        <pattern>[feature-name].integration.test.ts</pattern>
        <examples>
          <valid>auth-flow.integration.test.ts</valid>
          <invalid reason="Wrong location">src/auth.integration.test.ts</invalid>
        </examples>
      </Rule>
      <Rule type="e2e" location="tests/">
        <pattern>[user-flow].e2e.test.ts</pattern>
        <examples>
          <valid>checkout-process.e2e.test.ts</valid>
        </examples>
      </Rule>
      <Rule type="slow" location="tests/">
        <pattern>[feature-name].slow.test.ts</pattern>
        <note>Use for tests >500ms that are still valuable.</note>
      </Rule>
    </FileRules>

    <MethodRules enforcement="STRICT">
      <pattern>should_[expectedBehavior]_when_[condition]</pattern>
      <examples>
        <example>should_return_user_data_when_valid_id_provided</example>
        <example>should_throw_error_when_user_not_found</example>
      </examples>
      <antiPatterns>
        <forbidden reason="No behavior description">test user data</forbidden>
        <forbidden reason="Too vague">it works</forbidden>
        <forbidden reason="camelCase">shouldReturnUser</forbidden>
        <forbidden reason="Missing when clause">should_return_user</forbidden>
      </antiPatterns>
    </MethodRules>
  </NamingConventions>

  <!-- =========================
       2) CORE PRINCIPLES
       ========================= -->
  <Principles>
    <Principle id="tdd" enforcement="MANDATORY">
      <name>Test-Driven Development</name>
      <requirement>Write/adjust tests before implementation where feasible.</requirement>
      <rationale>Prevents scope creep and anchors intent.</rationale>
    </Principle>
    <Principle id="fast-feedback" enforcement="STRICT">
      <name>Fast Feedback</name>
      <requirement>Individual tests < 500ms; suites < 10s on dev machines.</requirement>
      <rationale>Keeps flow state and reduces task-switching.</rationale>
    </Principle>
    <Principle id="minimal-output" enforcement="STRICT">
      <name>Minimal Output</name>
      <requirement>Quiet by default; show failures concisely.</requirement>
      <rationale>Reduce cognitive load.</rationale>
    </Principle>
    <Principle id="isolation">
      <name>Deterministic & Isolated</name>
      <requirement>No shared mutable global state, fixed seeds for randomness.</requirement>
    </Principle>
  </Principles>

  <!-- =========================
       3) ADHD-OPTIMIZED WORKFLOW
       ========================= -->
  <ADHDOptimizations>
    <FocusHelpers>
      <feature name="only" allow="dev" forbid="commits" enforcement="pre-commit hook blocks" />
      <feature name="skip" allow="temp during refactor" forbid="main" />
      <feature name="watch">
        <default>Changed files only</default>
        <option>Related files when exploring impacts</option>
      </feature>
    </FocusHelpers>

    <CognitiveLoadReduction>
      <rule>≤ 3 describe nesting levels</rule>
      <rule>≤ 30 lines per test</rule>
      <rule>≤ 5 assertions per test</rule>
      <rule>Descriptive variable names required</rule>
    </CognitiveLoadReduction>

    <VisualClarity>
      <console>Suppress except on error</console>
      <reporter>Dot/minimal reporter for dev</reporter>
      <coverage>On-demand; not by default in watch</coverage>
    </VisualClarity>
  </ADHDOptimizations>

  <!-- =========================
       4) TEST PYRAMID & BOUNDARIES
       ========================= -->
  <Pyramid>
    <UnitTests target="%70">
      <guidelines>
        <item>Colocate with source; mock I/O boundaries.</item>
        <item>Pure logic first; avoid timers/network unless necessary.</item>
      </guidelines>
    </UnitTests>
    <IntegrationTests target="%25">
      <guidelines>
        <item>Exercise module seams (DB, HTTP, queue) with real adapters or thin fakes.</item>
        <item>Prefer ephemeral resources (tmp DB, in-memory servers).</item>
      </guidelines>
    </IntegrationTests>
    <E2E target="%5">
      <guidelines>
        <item>Cover critical happy paths and one key failure per flow.</item>
        <item>Parallelize; keep under 5–10 minutes in CI.</item>
      </guidelines>
    </E2E>
  </Pyramid>

  <!-- =========================
       5) DATA, TIME & FLAKES
       ========================= -->
  <Stability>
    <time>
      <rule>Use fake timers for deterministic delays.</rule>
      <rule>Prefer immediate/nextTick over arbitrary waits.</rule>
    </time>
    <randomness>
      <rule>Seed RNGs; use fixed fixtures.</rule>
    </randomness>
    <io>
      <rule>No real network in unit tests.</rule>
      <rule>Integration: allow controlled network to local/in-repo services only.</rule>
    </io>
    <flakes>
      <rule>Forbid retries as a band-aid; root-cause and fix.</rule>
    </flakes>
  </Stability>

  <!-- =========================
       6) COVERAGE POLICY
       ========================= -->
  <Coverage>
    <thresholds>
      <global lines="85" branches="80" functions="85" />
      <criticalPaths lines="90" branches="90" />
    </thresholds>
    <rules>
      <rule>Coverage gates enforced in CI only (not in local watch).</rule>
      <rule>New/changed files must not drop module coverage below thresholds.</rule>
    </rules>
  </Coverage>

  <!-- =========================
       7) FIX WORKFLOW (RUNNER-AGNOSTIC)
       ========================= -->
  <FixLoop>
    <Step index="1" id="discover">List failing tests (current file → project).</Step>
    <Step index="2" id="localize">Identify failing assertion and minimal repro.</Step>
    <Step index="3" id="instrument">Add stable bindings (no inline chains) to inspect state.</Step>
    <Step index="4" id="repair">Change prod code minimally; keep test intent intact.</Step>
    <Step index="5" id="verify">Re-run focused; then unfocus and run related set.</Step>
    <Step index="6" id="harden">Add regression case if bug was user-visible.</Step>
  </FixLoop>

  <!-- =========================
       8) CI & GUARDRAILS
       ========================= -->
  <CI>
    <preCommit>
      <checks>
        <check>No focused tests (only/skip)</check>
        <check>Lint + typecheck pass</check>
        <check>Fast unit subset pass</check>
      </checks>
    </preCommit>
    <pipeline>
      <stage name="unit-fast">Run unit on changed + dependent modules</stage>
      <stage name="integration">Spin ephemeral deps; run integration</stage>
      <stage name="e2e">Parallel shards; artifacts on failure</stage>
      <stage name="coverage">Enforce thresholds; fail on drop</stage>
    </pipeline>
  </CI>

  <!-- =========================
       9) QUICK COMMANDS (EXAMPLE)
       ========================= -->
  <QuickCommands>
    <cmd>pnpm test</cmd>
    <cmd>pnpm test:unit</cmd>
    <cmd>pnpm test:integration</cmd>
    <cmd>pnpm test:e2e</cmd>
    <cmd>pnpm test:focus</cmd>
    <cmd>pnpm test:failed</cmd>
    <cmd>pnpm test:find-slow</cmd>
  </QuickCommands>

  <!-- =========================
       10) ACCEPTANCE CRITERIA
       ========================= -->
  <Acceptance>
    <criterion>All tests adhere to file and method naming rules.</criterion>
    <criterion>No focused/disabled tests reach main.</criterion>
    <criterion>Average unit test runtime &lt; 500ms; suite &lt; 10s locally.</criterion>
    <criterion>Coverage thresholds met; no flakes in last 20 runs.</criterion>
  </Acceptance>

</TestPlan>
#!/usr/bin/env node
/**
 * Pre-commit Hook Binary for lint-staged
 * Accepts file paths as arguments and runs quality checks
 * Supports --fix flag for auto-fixing
 * ~30 lines
 */

import { existsSync } from 'node:fs'
import { dirname, join } from 'node:path'
import { fileURLToPath } from 'node:url'

const __dirname = dirname(fileURLToPath(import.meta.url))
const distPath = join(__dirname, '..', 'dist', 'facades', 'git-hook.js')

// Check if dist directory exists
if (!existsSync(distPath)) {
  console.error(`
⚠️  Pre-commit hook error: Quality check dist files not found!

The quality-check package needs to be built before running pre-commit hooks.

Please run:
  pnpm --filter @orchestr8/quality-check build

Or build all packages:
  pnpm build

Then try your commit again.
`)
  process.exit(1)
}

const { runGitHook } = await import('../dist/facades/git-hook.js')

async function main() {
  try {
    // Get file paths from lint-staged (passed as arguments)
    const args = process.argv.slice(2)
    const files = args.filter((arg) => !arg.startsWith('--'))
    const options = {
      fix: args.includes('--fix'),
      files: files.length > 0 ? files : undefined,
    }

    // Run git hook facade with files
    await runGitHook(options)
    process.exit(0)
  } catch (error) {
    // Error handling is done in the facade
    process.exit(error.exitCode || 1)
  }
}

// Handle uncaught errors gracefully
process.on('uncaughtException', (error) => {
  console.error('Pre-commit hook error:', error.message)
  process.exit(1)
})

process.on('unhandledRejection', (error) => {
  console.error('Pre-commit hook rejection:', error)
  process.exit(1)
})

main()
